// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/about/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/about">> = Specific
  const handler = {} as typeof import("../../src/app/about/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/app">> = Specific
  const handler = {} as typeof import("../../src/app/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/assistant/a/[token]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/assistant/a/[token]">> = Specific
  const handler = {} as typeof import("../../src/app/assistant/a/[token]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/assistant/analysis/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/assistant/analysis/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/assistant/analysis/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/assistant/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/assistant">> = Specific
  const handler = {} as typeof import("../../src/app/assistant/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/assistant/task/[token]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/assistant/task/[token]">> = Specific
  const handler = {} as typeof import("../../src/app/assistant/task/[token]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/assistent/a/[token]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/assistent/a/[token]">> = Specific
  const handler = {} as typeof import("../../src/app/assistent/a/[token]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/callback/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/callback">> = Specific
  const handler = {} as typeof import("../../src/app/auth/callback/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/otp/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/otp">> = Specific
  const handler = {} as typeof import("../../src/app/auth/otp/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth">> = Specific
  const handler = {} as typeof import("../../src/app/auth/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/drafting/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/drafting">> = Specific
  const handler = {} as typeof import("../../src/app/drafting/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/history/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/history">> = Specific
  const handler = {} as typeof import("../../src/app/history/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/privacy/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/privacy">> = Specific
  const handler = {} as typeof import("../../src/app/privacy/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/research/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/research">> = Specific
  const handler = {} as typeof import("../../src/app/research/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings">> = Specific
  const handler = {} as typeof import("../../src/app/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/team/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/team">> = Specific
  const handler = {} as typeof import("../../src/app/team/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/test_dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test_dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/test_dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/workflow/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/workflow">> = Specific
  const handler = {} as typeof import("../../src/app/workflow/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/assistant/analysis/[token]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/assistant/analysis/[token]">> = Specific
  const handler = {} as typeof import("../../src/app/api/assistant/analysis/[token]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/assistant/analysis/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/assistant/analysis">> = Specific
  const handler = {} as typeof import("../../src/app/api/assistant/analysis/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/[...nextauth]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/[...nextauth]">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/[...nextauth]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/test-db-connection/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/test-db-connection">> = Specific
  const handler = {} as typeof import("../../src/app/api/test-db-connection/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/test-db/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/test-db">> = Specific
  const handler = {} as typeof import("../../src/app/api/test-db/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/test-env/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/test-env">> = Specific
  const handler = {} as typeof import("../../src/app/api/test-env/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/user/profile/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/user/profile">> = Specific
  const handler = {} as typeof import("../../src/app/api/user/profile/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/app">> = Specific
  const handler = {} as typeof import("../../src/app/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
